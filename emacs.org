#+TITLE: Emacs Configuration

* Introduction

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  ;;; init.el --- Emacs configuration -*- lexical-binding: t -*-

  ;; NOTE: This init.el file is generated using the emacs.org file found in the same repository.
  ;; Do not edit this file directly, instead make changes to the org file and tangle the file accordingly.
#+END_SRC

Below are some keymaps for useful help documentation and tutorials.

1. ~C-h t~ Start the emacs tutorial
2. ~C-h f~ Describe function
3. ~C-h v~ Describe variable
4. ~C-h k~ Describe key

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration. [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

A quick primer on the `use-package' function (refer to ~C-h f use-package~ for the full details).

#+BEGIN_SRC emacs-lisp
  (use-package my-package-name
    :ensure t    ;; Ensure my-package is installed
    :after foo   ;; Load my-package after foo is loaded (seldom used)
    :init        ;; Run this code before my-package is loaded
    :bind        ;; Bind these keys to these functions
    :custom      ;; Set these variables
    :config      ;; Run this code after my-package is loade
#+END_SRC

** MELPA Setup

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq straight-use-package-by-default t)
#+END_SRC

* Startup performance

The startup performance for emacs can be improved by altering the garbage collection threshold.
The emacs startup hook is called to show the time taken to open emacs.

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun lowkii/emacs-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		      (time-subtract after-init-time before-init-time)))
	     gcs-done))
  (add-hook 'emacs-startup-hook #'lowkii/emacs-startup-time)
#+END_SRC

* Basic User Interface

The following code sets up some visual preferences in the UI as well as some basic changes to improve typing experience.

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (setq inhibit-startup-message t) ;; inhibit splash screen
  (scroll-bar-mode -1)        ;; Disable visible scrollbar
  (tool-bar-mode -1)          ;; Disable the toolbar
  (tooltip-mode -1)           ;; Disable tooltips
  (set-fringe-mode 10)        ;; Give some breathing room
  (menu-bar-mode -1)          ;; Disable the menu bar
  (setq visible-bell t)   ;; Set up the visible bell

  (setq-default frame-title-format '("%b - Emacs")) ; set the emacs title and overwrite the emacs@HOSTNAME

  (electric-pair-mode t) ;; automatically pair parentheses
  (show-paren-mode t) ;; show matching parentheses
  (save-place-mode t) ;; automatically save place in a file
  (global-auto-revert-mode t) ;; Keep files up-to-date when they change outside Emacs

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Emacs default changes

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (use-package emacs
    :init
    (setq enable-recursive-minibuffers t)
    (setq backup-by-copying t)
    (setq sentence-end-double-space nil)
    (setq show-trailing-whitespace t)

    (setq user-full-name "Lewis R. Hayward") ;; my details
    (setq user-mail-address "lrhayward93@gmail.com")

    (defalias 'yes-or-no-p 'y-or-n-p) ;; life is too short
    (setq indent-tabs-mode nil) ;; no tabs

    ;; keep backup and save files in a dedicated directory
    (setq backup-directory-alist
	  `((".*" . ,(concat user-emacs-directory "backup")))
	  auto-save-file-name-transforms
	  `((".*" ,(concat user-emacs-directory "backup") t)))

    (setq create-lockfiles nil) ;; no need to create lockfiles

    (set-charset-priority 'unicode) ;; utf8 in every nook and cranny
    (setq locale-coding-system 'utf-8
	  coding-system-for-read 'utf-8
	  coding-system-for-write 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

    (global-set-key (kbd "<escape>") 'keyboard-escape-quit) ;; escape quits everything

    ;; Don't persist a custom file
    (setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
    (setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
    (setq enable-local-variables :all)     ; fix =defvar= warnings

    (setq delete-by-moving-to-trash t) ;; use trash-cli rather than rm when deleting files.

    ;; less noise when compiling elisp
    (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
    (setq native-comp-async-report-warnings-errors nil)
    (setq load-prefer-newer t)

    ;; Hide commands in M-x which don't work in the current mode
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+END_SRC

** Font Configuration

I am using the Iosevka font for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or via git.

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 160)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font" :height 160)
  (set-face-attribute 'variable-pitch nil :font "Iosevka Nerd Font" :height 160  :weight 'regular)
#+END_SRC

* Packages

** Evil

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (use-package evil
    :straight t
    :config
    (evil-mode 1))
#+END_SRC

** General

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (use-package general
    :after evil
    :straight t
    :config
    ;; set up 'SPC' as the global leader key
    (general-create-definer lowkii/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    ;; set up ',' as the local leader key
    (general-create-definer lowkii/local-leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "," ;; set local leader
      :global-prefix "M-,"))
#+END_SRC

** EF-themes

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (use-package ef-themes
    :straight t
    :init
    (setq ef-themes-to-toggle '(ef-light ef-dark))
    :config
    (load-theme 'ef-dark :no-confirm))

  (lowkii/leader-keys
    "t" '(:ignore t :which-key "theme")
    "tt" '(ef-themes-toggle :which-key "toggle ef-theme")
    "tl" '(load-theme :which-key "load-theme"))
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (use-package which-key
    :straight t
    :config
    (which-key-mode))
#+END_SRC

** Savehist

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  ;; Save what you enter into minibuffer prompts
  (setq history-length 25)
  (savehist-mode 1)
#+END_SRC

** Org bullets

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (use-package org-bullets
    :straight t
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC

** Ace Window

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (use-package ace-window
    :straight t
    :after org
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-dispatch-always t))

  (lowkii/leader-keys
    "w" '(:ignore t :which-key "window")
    "ww" '(ace-window :which-key "window select")
    "wv" '(evil-window-vsplit :which-key "vertical split")
    "ws" '(evil-window-split :which-key "horizontal split"))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))
  (add-hook 'org-mode-hook 'lowkii/org-mode-setup)
#+END_SRC

** Code blocks

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp :tangle ./init.el :mkdirp yes
  (defun lowkii/indent-buffer()
    "Indent the currently visited buffer."
    (interactive)
    (indent-region (point-min) (point-max)))
#+END_SRC
